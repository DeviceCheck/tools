public class LogUtils {

    private static boolean sDebug = true;
    private static String sTag = "ztd";

    public static void init(boolean debug, String tag) {
        LogUtils.sDebug = debug;
        LogUtils.sTag = tag;
    }

    public static void d(String msg, Object... params) {
        d(null, msg, params);
    }

    public static void d(String tag, String msg, Object[] params) {
        if (!sDebug) return;
        tag = getFinalTag(tag);
        StackTraceElement targetStackTraceElement = getTargetStackTraceElement();
        Log.d(tag, String.format(msg, params) + " ==> [ (" + targetStackTraceElement.getFileName() + ":"
                + targetStackTraceElement.getLineNumber() + ")#"
                + targetStackTraceElement.getMethodName() + " ]");
    }

    public static void json(String msg, Object... params) {
        json(null, msg, params);
    }

    public static void json(String tag, String msg, Object[] params) {
        if (!sDebug) return;
        tag = getFinalTag(tag);
        StackTraceElement targetStackTraceElement = getTargetStackTraceElement();
        Log.d(tag, String.format(msg, params) + " ==> [ (" + targetStackTraceElement.getFileName() + ":"
                + targetStackTraceElement.getLineNumber() + ")#"
                + targetStackTraceElement.getMethodName() + " ]");
        String jsonString = parseJson((String) params[0]);
        Log.d(tag, "------------------------------");
        Log.d(tag, jsonString);
        Log.d(tag, "------------------------------");
    }

    public static String parseJson(String jsonStr) {
        try {
            jsonStr = jsonStr.trim();
            if (jsonStr.startsWith("{")) {
                JSONObject jsonObject = new JSONObject(jsonStr);
                return jsonObject.toString(JSON_INDENT);
            }
            if (jsonStr.startsWith("[")) {
                JSONArray jsonArray = new JSONArray(jsonStr);
                return jsonArray.toString(JSON_INDENT);
            }
        } catch (JSONException e) {
            return "Invalid Json, Please Check: " + jsonStr;
        }
        return "Invalid Json, Please Check: " + jsonStr;
    }

    private static String getFinalTag(String tag) {
        if (!TextUtils.isEmpty(tag)) {
            return tag;
        }
        return sTag;
    }

    private static StackTraceElement getTargetStackTraceElement() {
        // õ÷StackTraceElement
        StackTraceElement targetStackTrace = null;
        boolean shouldTrace = false;
        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
        for (StackTraceElement stackTraceElement : stackTrace) {
            boolean isLogMethod = stackTraceElement.getClassName().equals(LogUtils.class.getName());
            if (shouldTrace && !isLogMethod) {
                targetStackTrace = stackTraceElement;
                break;
            }
            shouldTrace = isLogMethod;
        }
        return targetStackTrace;
    }
}
