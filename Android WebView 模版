/**
 * FAQ WebView展示页面
 */

public class FAQWebView extends BaseActivity {
    @BindView(R.id.buy_faq_toolbar)
    Toolbar mToolbar;
    @BindView(R.id.buy_faq_wb)
    WebView mFaqWebView;
    private ProgressDialog mProgressDialog;

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.buy_faq_webview);
        ButterKnife.bind(this);

        initToolbar(getResources().getString(R.string.SlideMenu_item_faq));
        initWebView();
    }

    private void initWebView() {
        // 加载数据前，检查网络
        if (!isNetworkConnected(this)) {
            Toast.makeText(this, getResources().getString(R.string.common_msg_network_shutdown),
                    Toast.LENGTH_SHORT).show();
            return;
        }

        showProgressDialog();
        mFaqWebView.setVisibility(View.INVISIBLE);
        Intent intent = getIntent();
        String url = intent.getStringExtra(Constant.BUY_FAQ_URL);
        WebSettings settings = mFaqWebView.getSettings();
        settings.setJavaScriptEnabled(true);
        // 设置不支持缩放
        settings.setBuiltInZoomControls(false);
        // 优先使用缓存
        settings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);

        mFaqWebView.setWebViewClient(new WebViewClient() {
            @Override
            public void onPageFinished(WebView view, String url) {
                super.onPageFinished(view, url);
                if (mProgressDialog != null && mProgressDialog.isShowing()) {
                    mProgressDialog.dismiss();
                }

                mFaqWebView.setVisibility(View.VISIBLE);
            }
        });
        mFaqWebView.setWebChromeClient(new WebChromeClient());
        mFaqWebView.loadUrl(url);
    }

    private void initToolbar(@NonNull String title) {
        setSupportActionBar(mToolbar);
        ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setDisplayHomeAsUpEnabled(true);
            actionBar.setTitle(title);
            // 设置阴影
            actionBar.setElevation(DensityUtils.dip2px(4, this));
        }
    }

    /**
     * toolbar 返回键的监听
     *
     * @param item MenuItem
     * @return boolean
     */
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            // 返回键的监听
            case android.R.id.home:
                finish();
                this.overridePendingTransition(R.anim.animation_enter_home,
                        R.anim.animation_leave_home);
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    /**
     * WebView中返回键的监听
     *
     * @param keyCode int
     * @param event   KeyEvent
     * @return boolean
     */
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if ((keyCode == KeyEvent.KEYCODE_BACK) && mFaqWebView.canGoBack()) {
            // 这里拦截之后， onBackPressed不会在执行
            mFaqWebView.goBack();
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }

    /**
     * 侧拉栏返回键的监听
     */
    @Override
    public void onBackPressed() {
        if (isOpenDrawer()) {
            closeDrawer();
        } else {
            startActivity(new Intent(this, BuyActivity.class));
            this.finish();
            this.overridePendingTransition(R.anim.animation_enter_home,
                    R.anim.animation_leave_home);
        }
    }

    /**
     * dialog展示
     */
    private void showProgressDialog() {
        if (mProgressDialog != null) {
            mProgressDialog.show();
        } else {
            mProgressDialog = Utils.createProgressDialog(this);
            mProgressDialog.show();
        }
    }

    private boolean isNetworkConnected(Context context) {
        if (context != null) {
            // 获取手机所有连接管理对象(包括对wi-fi,net等连接的管理)
            ConnectivityManager manager = (ConnectivityManager) context
                    .getSystemService(Context.CONNECTIVITY_SERVICE);
            // 获取NetworkInfo对象
            NetworkInfo networkInfo = manager.getActiveNetworkInfo();
            //判断NetworkInfo对象是否为空
            if (networkInfo != null) {
                return networkInfo.isAvailable();
            }
        }
        return false;
    }
}



<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical">

    <include layout="@layout/buy_faq_toolbar" />

    <WebView
        android:id="@+id/buy_faq_wb"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:visibility="gone" />
</LinearLayout>
